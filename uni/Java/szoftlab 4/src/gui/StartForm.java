/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;


import controller.*;
import engine.Robot;
import java.util.Arrays;
import javax.swing.SpinnerListModel;

/**
 *
 * @author borgee
 */
public class StartForm extends javax.swing.JFrame {

    /**
     * Creates new form StartForm
     */
    
    public MyTableModel model;
    
    public StartForm() {
        initComponents();
        canvas = new MyGameCanvas();
        model = new MyTableModel();
        canvas.setBackground(new java.awt.Color(255, 255, 255));
        canvas.setForeground(new java.awt.Color(0, 0, 0));
        GamePanel.add(canvas, java.awt.BorderLayout.CENTER);
        scoreTable.setModel(model);
    }
    
    public void insertScore(Data d){
        model.insertData(d);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    private static final String[] deployGany = {"nincs","olajfolt","ragacsfolt"};
    private static final String[] directionGany = {"↑","→","↓", "←"};
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        StartPanel = new javax.swing.JPanel();
        nameLabel = new javax.swing.JLabel();
        numPlayers = new javax.swing.JSpinner();
        startGameButton = new javax.swing.JButton();
        numPlayersLabel = new javax.swing.JLabel();
        GamePanel = new javax.swing.JPanel();
        GameMenu = new javax.swing.JPanel();
        playerLabel = new javax.swing.JLabel();
        speedLabel = new javax.swing.JLabel();
        directionLabel = new javax.swing.JLabel();
        modSpeedLabel = new javax.swing.JLabel();
        modSpeedSpin = new javax.swing.JSpinner();
        modDirectionLabel = new javax.swing.JLabel();
        modDirectionSpin = new javax.swing.JSpinner(new SpinnerListModel(directionGany));
        jLabel1 = new javax.swing.JLabel();
        deployState = new javax.swing.JSpinner(new SpinnerListModel(deployGany));
        stepButton = new javax.swing.JButton();
        ScorePanel = new javax.swing.JPanel();
        scoreLabel = new javax.swing.JLabel();
        scoreScroll = new javax.swing.JScrollPane();
        scoreTable = new javax.swing.JTable();
        exitButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new java.awt.CardLayout());

        StartPanel.setPreferredSize(new java.awt.Dimension(900, 500));

        nameLabel.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        nameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        nameLabel.setText("Phoebe");

        numPlayers.setModel(new javax.swing.SpinnerNumberModel(2, 2, 4, 1));
        numPlayers.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                numPlayersMouseWheelMoved(evt);
            }
        });

        startGameButton.setLabel("Start");
        startGameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startGameButtonActionPerformed(evt);
            }
        });

        numPlayersLabel.setText("Játékosok száma:");

        javax.swing.GroupLayout StartPanelLayout = new javax.swing.GroupLayout(StartPanel);
        StartPanel.setLayout(StartPanelLayout);
        StartPanelLayout.setHorizontalGroup(
            StartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(StartPanelLayout.createSequentialGroup()
                .addContainerGap(325, Short.MAX_VALUE)
                .addGroup(StartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, StartPanelLayout.createSequentialGroup()
                        .addComponent(numPlayersLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(numPlayers, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(startGameButton)
                        .addGap(312, 312, 312))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, StartPanelLayout.createSequentialGroup()
                        .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(382, 382, 382))))
        );
        StartPanelLayout.setVerticalGroup(
            StartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(StartPanelLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 198, Short.MAX_VALUE)
                .addGroup(StartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numPlayers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startGameButton)
                    .addComponent(numPlayersLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(216, 216, 216))
        );

        startGameButton.getAccessibleContext().setAccessibleName("okButton");

        getContentPane().add(StartPanel, "card6");
        StartPanel.getAccessibleContext().setAccessibleName("startPanel");

        GamePanel.setLayout(new java.awt.BorderLayout());

        GameMenu.setLayout(new java.awt.GridLayout(1, 0));

        playerLabel.setText("Játékos: dd");
        playerLabel.setToolTipText("");
        GameMenu.add(playerLabel);

        speedLabel.setText("Sebesség: dd");
        GameMenu.add(speedLabel);

        directionLabel.setText("Irány: up");
        GameMenu.add(directionLabel);

        modSpeedLabel.setText("Sebesség:");
        GameMenu.add(modSpeedLabel);
        GameMenu.add(modSpeedSpin);

        modDirectionLabel.setText("Új Irány:");
        GameMenu.add(modDirectionLabel);
        GameMenu.add(modDirectionSpin);

        jLabel1.setText("Akadály:");
        GameMenu.add(jLabel1);

        deployState.setName("deployState"); // NOI18N
        GameMenu.add(deployState);
        deployState.getAccessibleContext().setAccessibleName("");

        stepButton.setLabel("Lép");
        stepButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stepButtonActionPerformed(evt);
            }
        });
        GameMenu.add(stepButton);

        GamePanel.add(GameMenu, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(GamePanel, "card4");

        ScorePanel.setLayout(new java.awt.GridBagLayout());

        scoreLabel.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        scoreLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        scoreLabel.setText("Eredmény");
        scoreLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        ScorePanel.add(scoreLabel, gridBagConstraints);

        scoreTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Robot", "Pont"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scoreScroll.setViewportView(scoreTable);
        scoreTable.getAccessibleContext().setAccessibleName("ResultTable");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        ScorePanel.add(scoreScroll, gridBagConstraints);

        exitButton.setText("Kilépés");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        ScorePanel.add(exitButton, gridBagConstraints);

        getContentPane().add(ScorePanel, "card3");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_exitButtonActionPerformed

    private void startGameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startGameButtonActionPerformed
        try {
            Controller instance = Controller.getInstance();
            instance.setNumOfPlayers(Integer.parseInt(numPlayers.getValue().toString()));
            instance.play();
        } catch(Throwable t) {
            t.printStackTrace();
        }
    }//GEN-LAST:event_startGameButtonActionPerformed

    private void stepButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stepButtonActionPerformed
        try {
            Controller instance = Controller.getInstance();
            int dirVal = 0;
            for (int i = 0; i < directionGany.length; i++){
                if (directionGany[i].compareTo(modDirectionSpin.getValue().toString()) == 0){
                    dirVal = i;
                }
            }
            instance.step(Integer.parseInt(modSpeedSpin.getValue().toString()), dirVal, deployState.getValue().toString());
        } catch(Throwable t) {
            t.printStackTrace();
        }
    }//GEN-LAST:event_stepButtonActionPerformed

    private void numPlayersMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_numPlayersMouseWheelMoved
        int currPl = Integer.parseInt(numPlayers.getValue().toString());
        int dir = evt.getWheelRotation();
        if(dir > 0) {
            if(currPl > 1) {
                numPlayers.setValue(currPl - 1);
                numPlayers.invalidate();
            }
        }
        else if(dir < 0) {
            if(currPl < 5) {
                numPlayers.setValue(currPl + 1);
                numPlayers.invalidate();
            }
        }
    }//GEN-LAST:event_numPlayersMouseWheelMoved

    public void updateGamePanel(Robot r) {
        canvas.repaint();
        String arrows = "↑→↓←";
        
        playerLabel.setText("Játékos: " + r.getID());
        speedLabel.setText("Sebesség: " + r.getVelocity());
        directionLabel.setText("Irány: " + arrows.charAt(r.getDirection()));
        playerLabel.invalidate();
        speedLabel.invalidate();
        directionLabel.invalidate();
    }
    
    public boolean setActive(String panel) {
        // System.out.println("setActive(" + panel + ")");
        getContentPane().removeAll();
        if(panel.compareTo("StartPanel") == 0) {
            getContentPane().add(StartPanel);
            return true;
        }
        
        if(panel.compareTo("GamePanel") == 0) {
            getContentPane().add(GamePanel);
            return true;
        }
        
        if(panel.compareTo("ScorePanel") == 0) {
            getContentPane().add(ScorePanel);
            return true;
        }
        
        return false;
    }

    private final MyGameCanvas canvas;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel GameMenu;
    private javax.swing.JPanel GamePanel;
    private javax.swing.JPanel ScorePanel;
    private javax.swing.JPanel StartPanel;
    private javax.swing.JSpinner deployState;
    private javax.swing.JLabel directionLabel;
    private javax.swing.JButton exitButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel modDirectionLabel;
    private javax.swing.JSpinner modDirectionSpin;
    private javax.swing.JLabel modSpeedLabel;
    private javax.swing.JSpinner modSpeedSpin;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JSpinner numPlayers;
    private javax.swing.JLabel numPlayersLabel;
    private javax.swing.JLabel playerLabel;
    private javax.swing.JLabel scoreLabel;
    private javax.swing.JScrollPane scoreScroll;
    private javax.swing.JTable scoreTable;
    private javax.swing.JLabel speedLabel;
    private javax.swing.JButton startGameButton;
    private javax.swing.JButton stepButton;
    // End of variables declaration//GEN-END:variables
}
